import os

# S·ª≠ d·ª•ng m√£ m√†u ANSI ƒë·ªÉ l√†m cho output d·ªÖ ƒë·ªçc h∆°n
C_RED = '\033[91m'
C_GREEN = '\033[92m'
C_YELLOW = '\033[93m'
C_BLUE = '\033[94m'
C_END = '\033[0m'

def _print_success(message):
    """In th√¥ng b√°o th√†nh c√¥ng m√†u xanh l√°."""
    print(f"{C_GREEN}{message}{C_END}")

def _print_error(message):
    """In th√¥ng b√°o l·ªói m√†u ƒë·ªè."""
    print(f"{C_RED}{message}{C_END}")

def _print_warning(message):
    """In c·∫£nh b√°o m√†u v√†ng."""
    print(f"{C_YELLOW}{message}{C_END}")

def check_directory(model_name: str, model_path: str, required_files: list) -> bool:
    """
    H√†m chung ƒë·ªÉ ki·ªÉm tra m·ªôt th∆∞ m·ª•c model.

    Args:
        model_name (str): T√™n c·ªßa model ƒë·ªÉ in ra (v√≠ d·ª•: "LLM Model").
        model_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c model.
        required_files (list): Danh s√°ch c√°c file b·∫Øt bu·ªôc ph·∫£i c√≥.

    Returns:
        bool: True n·∫øu t·∫•t c·∫£ file ƒë·ªÅu t·ªìn t·∫°i, ng∆∞·ª£c l·∫°i l√† False.
    """
    print(f"{C_BLUE}--- B·∫ÆT ƒê·∫¶U KI·ªÇM TRA: {model_name} T·∫°i '{model_path}' ---{C_END}")
    
    # 1. Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa th∆∞ m·ª•c ch√≠nh
    if not os.path.isdir(model_path):
        _print_error(f"‚ùå L·ªñI NGHI√äM TR·ªåNG: Th∆∞ m·ª•c '{model_path}' kh√¥ng t·ªìn t·∫°i!")
        return False

    missing_files = []
    
    # 2. Ki·ªÉm tra t·ª´ng file b·∫Øt bu·ªôc
    for filename in required_files:
        file_path = os.path.join(model_path, filename)
        if os.path.exists(file_path):
            _print_success(f"  [PASS] T√¨m th·∫•y: {filename}")
        else:
            _print_error(f"  [FAIL] Thi·∫øu file: {filename}")
            missing_files.append(filename)

    # 3. ƒê∆∞a ra k·∫øt lu·∫≠n
    if not missing_files:
        _print_success(f"\n‚úÖ TUY·ªÜT V·ªúI! T·∫•t c·∫£ c√°c file c·∫ßn thi·∫øt cho '{model_name}' ƒë·ªÅu ·ªü ƒë√∫ng v·ªã tr√≠.")
        return True
    else:
        _print_error(f"\n‚ùå L·ªñI C·∫§U TR√öC! Thi·∫øu {len(missing_files)} file quan tr·ªçng cho '{model_name}'.")
        _print_warning("üëâ H∆∞·ªõng d·∫´n s·ª≠a l·ªói: H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ di chuy·ªÉn t·∫•t c·∫£ c√°c file model ra kh·ªèi")
        _print_warning("   th∆∞ m·ª•c con (nh∆∞ '.cache' ho·∫∑c 'transformers') v√† ƒë·∫∑t ch√∫ng tr·ª±c ti·∫øp b√™n trong")
        _print_warning(f"   th∆∞ m·ª•c '{model_path}'.")
        return False

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y t·∫•t c·∫£ c√°c b√†i ki·ªÉm tra."""
    print("="*60)
    print("      SCRIPT KI·ªÇM TRA C·∫§U TR√öC TH∆Ø M·ª§C MODEL")
    print("="*60)

    # --- Danh s√°ch c√°c file b·∫Øt bu·ªôc cho m·ªói model ---
    
    # D√†nh cho model embedding (sentence-transformers)
    embedding_required = [
        "config.json",
        "model.safetensors",
        "modules.json",
        "sentence_bert_config.json",
        "tokenizer.json",
        "tokenizer_config.json",
        "vocab.txt"
    ]

    # D√†nh cho LLM (v√≠ d·ª•: PhoGPT ho·∫∑c c√°c model t∆∞∆°ng t·ª±)
    # L∆∞u √Ω: Ch√∫ng ta ch·ªâ ki·ªÉm tra file shard ƒë·∫ßu ti√™n ƒë·ªÉ x√°c nh·∫≠n
    llm_required = [
        "config.json",
        "generation_config.json",
        "model.safetensors.index.json",
        "model-00001-of-00004.safetensors", # Thay ƒë·ªïi s·ªë shard n·∫øu model c·ªßa b·∫°n kh√°c
        "tokenizer.json"
    ]

    # --- Ch·∫°y ki·ªÉm tra ---
    embedding_ok = check_directory(
        model_name="Embedding Model", 
        model_path="models/embedding_model", 
        required_files=embedding_required
    )
    
    print() # In m·ªôt d√≤ng tr·ªëng ƒë·ªÉ ngƒÉn c√°ch

    llm_ok = check_directory(
        model_name="Large Language Model (LLM)", 
        model_path="models/llm_model", 
        required_files=llm_required
    )
    
    # --- K·∫øt lu·∫≠n cu·ªëi c√πng ---
    print("\n" + "="*60)
    if embedding_ok and llm_ok:
        _print_success("üéâ T·∫§T C·∫¢ ƒê√É S·∫¥N S√ÄNG! C·∫•u tr√∫c th∆∞ m·ª•c model c·ªßa b·∫°n ho√†n to√†n ch√≠nh x√°c.")
        _print_success("B√¢y gi·ªù b·∫°n c√≥ th·ªÉ t·ª± tin ch·∫°y 'python app.py'.")
    else:
        _print_error("üö´ KI·ªÇM TRA TH·∫§T B·∫†I! Vui l√≤ng s·ª≠a c√°c l·ªói ƒë∆∞·ª£c b√°o ·ªü tr√™n tr∆∞·ªõc khi ti·∫øp t·ª•c.")
    print("="*60)


if __name__ == "__main__":
    main()